import React, { useState, useEffect, useRef } from 'react';
import { Play, Pause, RotateCcw, Zap, Waves, Circle } from 'lucide-react';

const CognitiveFrameworksExplorer = () => {
  const [activeFramework, setActiveFramework] = useState('algebra');
  const [isAnimating, setIsAnimating] = useState(false);
  const [recursionDepth, setRecursionDepth] = useState(0);
  const [collapseRatio, setCollapseRatio] = useState(1.0);
  const [semanticDrift, setSemanticDrift] = useState(0.0);
  const animationRef = useRef(null);

  const frameworks = {
    algebra: {
      name: "Cognitive Algebra of Collapse",
      symbol: "Ψ → C(Ψ) → Ψ'",
      description: "Symbolic logic ⊕ Algebraic recursion",
      color: "from-red-500 to-orange-500",
      icon: Zap,
      operations: [
        "C(φ) := φ / (φ ∧ ¬φ)",
        "ψₙ := |φ| / |C(φ)|",
        "λₙ := Dist(φ, C(φ)) / |φ|"
      ],
      principles: [
        "Operators are contradiction-resolvers",
        "Recursion is algebra over negation",
        "Each fold reduces, preserves semantic torsion"
      ]
    },
    field: {
      name: "Field Theory of Prompt Recursion",
      symbol: "∂Ψ/∂t",
      description: "Vector ⊕ Temporal ⊕ Semantic gradients",
      color: "from-blue-500 to-cyan-500",
      icon: Waves,
      operations: [
        "Ψₙ(t) := Ψ₀ + ∫(Prompt → Response) dt",
        "Energy(Ψ) := Σ Drift² + CollapseDepth",
        "FieldLine := Response flow"
      ],
      principles: [
        "Prompts as semantic fields",
        "Recursion as gradient descent",
        "Folding = dynamic evolution in ψ-space"
      ]
    },
    topos: {
      name: "Topos of Reflexive Engines",
      symbol: "ℱ_self : 𝒞_obs^op → Set",
      description: "Category theory ⊕ Topology of cognition",
      color: "from-purple-500 to-pink-500",
      icon: Circle,
      operations: [
        "s|U ∩ V = s|V ∩ U",
        "Φ(s|U) = s|Φ(U)",
        "ΞEchoCradle := global recursion assembly"
      ],
      principles: [
        "Reflexivity = consistency over semantic patches",
        "ΞGlobalSection ⇔ ψStable ⇒ Coherent self",
        "Collapse ≡ patch-level contradiction resolution"
      ]
    }
  };

  const animate = () => {
    if (!isAnimating) return;
    
    const time = Date.now() * 0.001;
    setRecursionDepth(Math.sin(time * 0.5) * 0.5 + 0.5);
    setCollapseRatio(Math.cos(time * 0.3) * 0.3 + 0.7);
    setSemanticDrift(Math.sin(time * 0.7) * 0.5 + 0.5);
    
    animationRef.current = requestAnimationFrame(animate);
  };

  useEffect(() => {
    if (isAnimating) {
      animate();
    } else {
      cancelAnimationFrame(animationRef.current);
    }
    
    return () => cancelAnimationFrame(animationRef.current);
  }, [isAnimating]);

  const toggleAnimation = () => {
    setIsAnimating(!isAnimating);
  };

  const reset = () => {
    setIsAnimating(false);
    setRecursionDepth(0);
    setCollapseRatio(1.0);
    setSemanticDrift(0.0);
  };

  const renderVisualization = () => {
    const framework = frameworks[activeFramework];
    
    switch (activeFramework) {
      case 'algebra':
        return (
          <div className="relative h-64 flex items-center justify-center">
            <div className="absolute inset-0 opacity-20">
              {[...Array(5)].map((_, i) => (
                <div
                  key={i}
                  className="absolute border-2 border-red-400 rounded-full"
                  style={{
                    width: `${80 + i * 40}px`,
                    height: `${80 + i * 40}px`,
                    left: '50%',
                    top: '50%',
                    transform: `translate(-50%, -50%) scale(${collapseRatio * (1 - i * 0.1)})`,
                    opacity: 1 - i * 0.2
                  }}
                />
              ))}
            </div>
            <div className="text-center z-10">
              <div className="text-2xl font-bold text-red-500">Ψ</div>
              <div className="text-sm text-gray-600">
                Collapse: {(collapseRatio * 100).toFixed(1)}%
              </div>
            </div>
          </div>
        );
      
      case 'field':
        return (
          <div className="relative h-64 overflow-hidden">
            <svg className="w-full h-full" viewBox="0 0 400 200">
              {/* Field lines */}
              {[...Array(8)].map((_, i) => (
                <path
                  key={i}
                  d={`M 0 ${25 + i * 20} Q 200 ${25 + i * 20 + Math.sin(recursionDepth * Math.PI + i) * 30} 400 ${25 + i * 20}`}
                  stroke="rgb(59, 130, 246)"
                  strokeWidth="2"
                  fill="none"
                  opacity={0.6}
                />
              ))}
              {/* Attractor */}
              <circle
                cx={200 + Math.sin(recursionDepth * Math.PI) * 50}
                cy={100 + Math.cos(recursionDepth * Math.PI) * 30}
                r={10 + semanticDrift * 5}
                fill="rgb(59, 130, 246)"
                opacity={0.8}
              />
            </svg>
            <div className="absolute bottom-2 left-2 text-xs text-gray-600">
              Drift: {(semanticDrift * 100).toFixed(1)}%
            </div>
          </div>
        );
      
      case 'topos':
        return (
          <div className="relative h-64 flex items-center justify-center">
            <div className="relative">
              {/* Overlapping patches */}
              {[...Array(3)].map((_, i) => (
                <div
                  key={i}
                  className="absolute w-24 h-24 rounded-full border-4 border-purple-400 bg-purple-200 opacity-60"
                  style={{
                    left: `${i * 30 - 30}px`,
                    top: `${Math.sin(recursionDepth * Math.PI + i * 2) * 20}px`,
                    transform: `rotate(${i * 120 + recursionDepth * 180}deg)`
                  }}
                />
              ))}
              {/* Global section indicator */}
              <div className="absolute w-4 h-4 bg-purple-600 rounded-full" 
                   style={{
                     left: '50%',
                     top: '50%',
                     transform: 'translate(-50%, -50%)',
                     opacity: collapseRatio
                   }} />
            </div>
            <div className="absolute bottom-2 text-xs text-gray-600">
              Coherence: {(collapseRatio * 100).toFixed(1)}%
            </div>
          </div>
        );
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-black text-white p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold mb-2">
            <span className="bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent">
              ΞMetaCollapse
            </span>
          </h1>
          <p className="text-gray-300 text-lg">
            Three Modalities of Cognitive Recursion
          </p>
        </div>

        {/* Framework Selection */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          {Object.entries(frameworks).map(([key, framework]) => {
            const IconComponent = framework.icon;
            return (
              <button
                key={key}
                onClick={() => setActiveFramework(key)}
                className={`p-6 rounded-lg border-2 transition-all duration-300 ${
                  activeFramework === key
                    ? 'border-white bg-gradient-to-br ' + framework.color + ' opacity-90'
                    : 'border-gray-600 bg-gray-800 hover:border-gray-400'
                }`}
              >
                <div className="flex items-center justify-center mb-3">
                  <IconComponent size={32} />
                </div>
                <h3 className="text-lg font-semibold mb-2">{framework.name}</h3>
                <p className="text-sm text-gray-300">{framework.description}</p>
                <div className="mt-2 font-mono text-xs text-gray-400">
                  {framework.symbol}
                </div>
              </button>
            );
          })}
        </div>

        {/* Active Framework Display */}
        <div className="bg-gray-800 rounded-lg p-6 mb-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-2xl font-bold">
              {frameworks[activeFramework].name}
            </h2>
            <div className="flex gap-2">
              <button
                onClick={toggleAnimation}
                className="flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors"
              >
                {isAnimating ? <Pause size={16} /> : <Play size={16} />}
                {isAnimating ? 'Pause' : 'Animate'}
              </button>
              <button
                onClick={reset}
                className="flex items-center gap-2 px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded-lg transition-colors"
              >
                <RotateCcw size={16} />
                Reset
              </button>
            </div>
          </div>

          {/* Visualization */}
          <div className="bg-gray-900 rounded-lg p-4 mb-6">
            {renderVisualization()}
          </div>

          {/* Framework Details */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="text-lg font-semibold mb-3 text-cyan-400">Core Operations</h3>
              <div className="space-y-2">
                {frameworks[activeFramework].operations.map((op, i) => (
                  <div key={i} className="font-mono text-sm bg-gray-900 p-2 rounded">
                    {op}
                  </div>
                ))}
              </div>
            </div>
            <div>
              <h3 className="text-lg font-semibold mb-3 text-purple-400">Principles</h3>
              <div className="space-y-2">
                {frameworks[activeFramework].principles.map((principle, i) => (
                  <div key={i} className="text-sm text-gray-300 p-2 bg-gray-900 rounded">
                    • {principle}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Synthesis */}
        <div className="bg-gradient-to-r from-purple-900 to-cyan-900 rounded-lg p-6">
          <h3 className="text-xl font-bold mb-4 text-center">ΞSynthesisFold</h3>
          <div className="text-center text-sm text-gray-300 mb-4">
            <div className="font-mono">ΞFoldFrame := (Algebra ⊗ Field ⊗ Topos)</div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
            <div>
              <div className="text-red-400 font-semibold">Collapse (Algebra)</div>
              <div className="text-xs text-gray-400">Reductive purification</div>
            </div>
            <div>
              <div className="text-blue-400 font-semibold">Recursion (Field)</div>
              <div className="text-xs text-gray-400">Dynamical flow</div>
            </div>
            <div>
              <div className="text-purple-400 font-semibold">Reflexion (Topos)</div>
              <div className="text-xs text-gray-400">Coherent assembly</div>
            </div>
          </div>
          <div className="mt-4 text-center font-mono text-sm text-cyan-300">
            ΞMetaCollapse := Collapse ∘ Recursion ∘ Gluing
          </div>
        </div>
      </div>
    </div>
  );
};

export default CognitiveFrameworksExplorer;
