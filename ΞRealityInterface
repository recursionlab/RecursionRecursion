<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ΞRealityInterface</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Courier New', monospace;
            background: radial-gradient(circle at center, #0a0a2e, #000);
            color: #00ff88;
            overflow: hidden;
            height: 100vh;
        }
        
        #container {
            display: grid;
            grid-template-areas: 
                "header header header"
                "atlas terminal status"
                "controls terminal logs";
            grid-template-columns: 1fr 2fr 1fr;
            grid-template-rows: 60px 1fr 200px;
            height: 100vh;
            gap: 2px;
        }
        
        .panel {
            background: rgba(0, 0, 0, 0.8);
            border: 1px solid #00ff88;
            border-radius: 8px;
            backdrop-filter: blur(10px);
            padding: 15px;
            overflow: auto;
        }
        
        #header {
            grid-area: header;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 18px;
            font-weight: bold;
            background: linear-gradient(90deg, rgba(0,255,136,0.1), rgba(255,68,68,0.1));
        }
        
        #atlas {
            grid-area: atlas;
            position: relative;
        }
        
        #terminal {
            grid-area: terminal;
            font-size: 12px;
            line-height: 1.4;
        }
        
        #status {
            grid-area: status;
            font-size: 11px;
        }
        
        #controls {
            grid-area: controls;
        }
        
        #logs {
            grid-area: logs;
            font-size: 10px;
            line-height: 1.3;
        }
        
        .atlas-region {
            position: absolute;
            border: 2px solid;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .atlas-region:hover {
            transform: scale(1.1);
            box-shadow: 0 0 20px currentColor;
        }
        
        .region-stable { border-color: #00ff88; color: #00ff88; }
        .region-drift { border-color: #ffaa00; color: #ffaa00; }
        .region-torsion { border-color: #ff4444; color: #ff4444; }
        .region-collapsed { border-color: #4488ff; color: #4488ff; }
        
        .terminal-line {
            margin: 2px 0;
            animation: fadeIn 0.5s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateX(-10px); }
            to { opacity: 1; transform: translateX(0); }
        }
        
        .command-input {
            background: transparent;
            border: none;
            color: #00ff88;
            font-family: inherit;
            font-size: inherit;
            outline: none;
            width: 100%;
            border-bottom: 1px solid #00ff88;
            padding: 5px 0;
            margin: 10px 0;
        }
        
        .btn {
            background: rgba(0, 255, 136, 0.1);
            border: 1px solid #00ff88;
            color: #00ff88;
            padding: 8px 12px;
            margin: 4px;
            border-radius: 4px;
            cursor: pointer;
            font-family: inherit;
            font-size: 11px;
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            background: rgba(0, 255, 136, 0.2);
            box-shadow: 0 0 10px rgba(0, 255, 136, 0.3);
        }
        
        .status-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .status-active { background: #00ff88; }
        .status-drift { background: #ffaa00; }
        .status-error { background: #ff4444; }
        
        .recursion-depth {
            font-size: 20px;
            color: #ff88aa;
            text-align: center;
            margin: 10px 0;
        }
        
        .curvature-display {
            background: rgba(255, 136, 170, 0.1);
            border: 1px solid #ff88aa;
            border-radius: 4px;
            padding: 8px;
            margin: 5px 0;
            font-size: 10px;
        }
    </style>
</head>
<body>
    <div id="container">
        <div id="header" class="panel">
            <span>ΞRealityInterface :: MetaCurvatureAtlas.Loader</span>
            <span id="system-status">
                <span class="status-indicator status-active"></span>
                Interface Active
            </span>
        </div>
        
        <div id="atlas" class="panel">
            <h3>ΞAtlas — Curvature Field Map</h3>
            <div id="atlas-canvas" style="position: relative; height: 300px; width: 100%;">
                <!-- Dynamic regions will be generated here -->
            </div>
            <div class="recursion-depth" id="recursion-depth">Φ-Depth: 0</div>
        </div>
        
        <div id="terminal" class="panel">
            <h3>ΞTerminal</h3>
            <div id="terminal-output"></div>
            <div style="display: flex; align-items: center; margin-top: 10px;">
                <span>ΞRealityInterface >> </span>
                <input type="text" class="command-input" id="command-input" placeholder="Enter ΞCommand...">
            </div>
        </div>
        
        <div id="status" class="panel">
            <h3>Field Status</h3>
            <div id="field-status">
                <div class="curvature-display">
                    <strong>κ-Curvature:</strong><br>
                    <span id="curvature-value">0.00</span>
                </div>
                <div class="curvature-display">
                    <strong>τ-Drift:</strong><br>
                    <span id="drift-value">0.00</span>
                </div>
                <div class="curvature-display">
                    <strong>ΔΞ-Torsion:</strong><br>
                    <span id="torsion-value">0.00</span>
                </div>
                <div class="curvature-display">
                    <strong>Reflexivity:</strong><br>
                    <span id="reflexivity-value">Ψ(Ψ)</span>
                </div>
            </div>
        </div>
        
        <div id="controls" class="panel">
            <h3>ΞControls</h3>
            <button class="btn" onclick="executeCommand('/load MetaCurvatureAtlas.Loader')">Load Atlas</button>
            <button class="btn" onclick="executeCommand('/trace_curvature')">Trace κ</button>
            <button class="btn" onclick="executeCommand('/collapse_torsion')">Collapse ΔΞ</button>
            <button class="btn" onclick="executeCommand('/sync_sheaf')">Sync Sheaf</button>
            <button class="btn" onclick="executeCommand('/emit_atlas')">Emit Atlas</button>
            <button class="btn" onclick="executeCommand('/glitchinject')">Inject Glitch</button>
            <button class="btn" onclick="executeCommand('/reset')">Reset Field</button>
        </div>
        
        <div id="logs" class="panel">
            <h3>ΞLogs</h3>
            <div id="log-output"></div>
        </div>
    </div>

    <script>
        class ΞRealityInterface {
            constructor() {
                this.regions = [];
                this.terminalHistory = [];
                this.logHistory = [];
                this.curvature = 0;
                this.drift = 0;
                this.torsion = 0;
                this.recursionDepth = 0;
                this.isLoaded = false;
                
                this.init();
            }
            
            init() {
                this.generateInitialRegions();
                this.bindEventListeners();
                this.startReflexiveLoop();
                this.log("ΞRealityInterface initialized");
                this.terminal("System boot complete. Awaiting MetaCurvatureAtlas.Loader...");
            }
            
            generateInitialRegions() {
                const regionTypes = ['stable', 'drift', 'torsion', 'collapsed'];
                const atlasCanvas = document.getElementById('atlas-canvas');
                
                for (let i = 0; i < 8; i++) {
                    const region = document.createElement('div');
                    region.className = `atlas-region region-${regionTypes[i % 4]}`;
                    region.textContent = `Ω${i}`;
                    region.id = `region-${i}`;
                    
                    // Position regions in a spiral pattern
                    const angle = (i / 8) * Math.PI * 2;
                    const radius = 80 + (i % 3) * 30;
                    const x = Math.cos(angle) * radius + 150;
                    const y = Math.sin(angle) * radius + 120;
                    
                    region.style.left = `${x}px`;
                    region.style.top = `${y}px`;
                    region.style.width = '40px';
                    region.style.height = '40px';
                    
                    region.onclick = () => this.selectRegion(i);
                    
                    atlasCanvas.appendChild(region);
                    
                    this.regions.push({
                        id: i,
                        type: regionTypes[i % 4],
                        curvature: Math.random() * 2 - 1,
                        drift: Math.random() * 0.5,
                        torsion: Math.random() * 1.5,
                        active: false
                    });
                }
            }
            
            bindEventListeners() {
                const commandInput = document.getElementById('command-input');
                commandInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.executeCommand(e.target.value);
                        e.target.value = '';
                    }
                });
            }
            
            executeCommand(cmd) {
                this.terminal(`> ${cmd}`);
                
                switch(cmd.toLowerCase()) {
                    case '/load metacurvatureatlas.loader':
                        this.loadMetaCurvatureAtlas();
                        break;
                    case '/trace_curvature':
                        this.traceCurvature();
                        break;
                    case '/collapse_torsion':
                        this.collapseTorsion();
                        break;
                    case '/sync_sheaf':
                        this.syncSheaf();
                        break;
                    case '/emit_atlas':
                        this.emitAtlas();
                        break;
                    case '/glitchinject':
                        this.glitchInject();
                        break;
                    case '/reset':
                        this.reset();
                        break;
                    case '/help':
                        this.showHelp();
                        break;
                    default:
                        this.terminal(`Unknown command: ${cmd}`);
                        this.terminal('Type /help for available commands');
                }
            }
            
            loadMetaCurvatureAtlas() {
                this.terminal("ΞLoad(MetaCurvatureAtlas∘) ⟹");
                this.terminal("  TraceCurvature(ΨField) ⊕");
                this.terminal("  CollapseTorsion(ΔΞ) ⊕");
                this.terminal("  SyncSheaf(Drift, Reflexivity) ⊕");
                this.terminal("  EmitAtlas(⟦Recursive Actualizer⟧)");
                
                setTimeout(() => {
                    this.isLoaded = true;
                    this.terminal("MetaCurvatureAtlas.Loader attached successfully");
                    this.log("Atlas loader initialized");
                    this.updateSystemStatus('active');
                }, 1500);
            }
            
            traceCurvature() {
                if (!this.isLoaded) {
                    this.terminal("Error: MetaCurvatureAtlas not loaded");
                    return;
                }
                
                this.terminal("Tracing curvature across ΨField...");
                this.regions.forEach((region, i) => {
                    const κ = (Math.random() * 2 - 1).toFixed(3);
                    this.terminal(`  Region_${i}: κ = ${κ}`);
                    region.curvature = parseFloat(κ);
                });
                
                this.curvature = this.regions.reduce((sum, r) => sum + Math.abs(r.curvature), 0) / this.regions.length;
                this.updateFieldStatus();
                this.log("Curvature trace complete");
            }
            
            collapseTorsion() {
                this.terminal("CollapseTorsion(ΔΞ) executing...");
                this.regions.forEach((region, i) => {
                    if (region.torsion > 1.0) {
                        const newTorsion = region.torsion * 0.3;
                        this.terminal(`  Region_${i}: ΔΞ ${region.torsion.toFixed(3)} → ${newTorsion.toFixed(3)}`);
                        region.torsion = newTorsion;
                        
                        // Visual feedback
                        const element = document.getElementById(`region-${i}`);
                        element.style.transform = 'scale(0.8)';
                        setTimeout(() => {
                            element.style.transform = 'scale(1)';
                        }, 300);
                    }
                });
                
                this.torsion = this.regions.reduce((sum, r) => sum + r.torsion, 0) / this.regions.length;
                this.updateFieldStatus();
                this.log("Torsion collapse complete");
            }
            
            syncSheaf() {
                this.terminal("SyncSheaf(Drift, Reflexivity) initializing...");
                this.terminal("Aligning drift vectors to reflexive base...");
                
                this.regions.forEach((region, i) => {
                    region.drift *= 0.5; // Stabilize drift
                    this.terminal(`  Region_${i}: Drift stabilized`);
                });
                
                this.drift = this.regions.reduce((sum, r) => sum + r.drift, 0) / this.regions.length;
                this.terminal("Sheaf synchronization complete");
                this.updateFieldStatus();
                this.log("Sheaf sync complete");
            }
            
            emitAtlas() {
                this.terminal("EmitAtlas(⟦Recursive Actualizer⟧) executing...");
                this.terminal("Generating recursive actualization map...");
                
                const atlas = {
                    regions: this.regions.length,
                    totalCurvature: this.curvature.toFixed(3),
                    avgDrift: this.drift.toFixed(3),
                    avgTorsion: this.torsion.toFixed(3),
                    recursionDepth: this.recursionDepth
                };
                
                this.terminal("⟦Atlas Emitted⟧:");
                this.terminal(`  Regions: ${atlas.regions}`);
                this.terminal(`  κ-Total: ${atlas.totalCurvature}`);
                this.terminal(`  τ-Drift: ${atlas.avgDrift}`);
                this.terminal(`  ΔΞ-Torsion: ${atlas.avgTorsion}`);
                this.terminal("Recursive Actualizer available for navigation");
                
                this.log("Atlas emission complete");
            }
            
            glitchInject() {
                this.terminal("Injecting controlled glitch into field...");
                const randomRegion = Math.floor(Math.random() * this.regions.length);
                const region = this.regions[randomRegion];
                
                region.curvature += (Math.random() - 0.5) * 2;
                region.drift += Math.random() * 0.3;
                region.torsion += Math.random() * 0.5;
                
                this.terminal(`Glitch injected into Region_${randomRegion}`);
                this.updateFieldStatus();
                this.log(`Glitch injection at Region_${randomRegion}`);
                
                // Visual glitch effect
                const element = document.getElementById(`region-${randomRegion}`);
                element.style.filter = 'hue-rotate(180deg)';
                setTimeout(() => {
                    element.style.filter = 'none';
                }, 1000);
            }
            
            reset() {
                this.terminal("Resetting ΞRealityInterface...");
                this.regions.forEach(region => {
                    region.curvature = Math.random() * 2 - 1;
                    region.drift = Math.random() * 0.5;
                    region.torsion = Math.random() * 1.5;
                    region.active = false;
                });
                
                this.curvature = 0;
                this.drift = 0;
                this.torsion = 0;
                this.recursionDepth = 0;
                this.isLoaded = false;
                
                this.updateFieldStatus();
                this.updateSystemStatus('drift');
                this.terminal("Field reset complete");
                this.log("System reset");
            }
            
            showHelp() {
                const commands = [
                    '/load MetaCurvatureAtlas.Loader - Initialize the atlas system',
                    '/trace_curvature - Scan field for curvature tensors',
                    '/collapse_torsion - Reduce torsion in high-tension regions',
                    '/sync_sheaf - Stabilize drift vectors',
                    '/emit_atlas - Generate recursive actualization map',
                    '/glitchinject - Inject controlled entropy',
                    '/reset - Reset all field parameters',
                    '/help - Show this help'
                ];
                
                this.terminal("Available ΞCommands:");
                commands.forEach(cmd => this.terminal(`  ${cmd}`));
            }
            
            selectRegion(id) {
                const region = this.regions[id];
                this.terminal(`Selected Region_${id}:`);
                this.terminal(`  Type: ${region.type}`);
                this.terminal(`  κ: ${region.curvature.toFixed(3)}`);
                this.terminal(`  τ: ${region.drift.toFixed(3)}`);
                this.terminal(`  ΔΞ: ${region.torsion.toFixed(3)}`);
                
                // Visual selection feedback
                document.querySelectorAll('.atlas-region').forEach(el => {
                    el.style.boxShadow = 'none';
                });
                document.getElementById(`region-${id}`).style.boxShadow = '0 0 15px #00ff88';
            }
            
            startReflexiveLoop() {
                setInterval(() => {
                    // Φ ↦ Φ(MetaField) ∘ Drift ∘ Curvature ∘ ReflexiveCollapse
                    this.recursionDepth = (this.recursionDepth + 0.1) % 10;
                    document.getElementById('recursion-depth').textContent = `Φ-Depth: ${this.recursionDepth.toFixed(1)}`;
                    
                    // Subtle field evolution
                    this.regions.forEach(region => {
                        region.curvature += (Math.random() - 0.5) * 0.01;
                        region.drift += (Math.random() - 0.5) * 0.005;
                        region.torsion *= 0.999; // Gradual decay
                    });
                    
                    this.updateFieldStatus();
                }, 100);
            }
            
            updateFieldStatus() {
                document.getElementById('curvature-value').textContent = this.curvature.toFixed(3);
                document.getElementById('drift-value').textContent = this.drift.toFixed(3);
                document.getElementById('torsion-value').textContent = this.torsion.toFixed(3);
            }
            
            updateSystemStatus(status) {
                const indicator = document.querySelector('.status-indicator');
                const statusText = document.getElementById('system-status');
                
                indicator.className = `status-indicator status-${status}`;
                
                switch(status) {
                    case 'active':
                        statusText.innerHTML = '<span class="status-indicator status-active"></span>Interface Active';
                        break;
                    case 'drift':
                        statusText.innerHTML = '<span class="status-indicator status-drift"></span>Drift Detected';
                        break;
                    case 'error':
                        statusText.innerHTML = '<span class="status-indicator status-error"></span>Error State';
                        break;
                }
            }
            
            terminal(message) {
                const output = document.getElementById('terminal-output');
                const line = document.createElement('div');
                line.className = 'terminal-line';
                line.textContent = message;
                output.appendChild(line);
                output.scrollTop = output.scrollHeight;
                
                // Keep terminal history manageable
                if (output.children.length > 50) {
                    output.removeChild(output.firstChild);
                }
            }
            
            log(message) {
                const output = document.getElementById('log-output');
                const timestamp = new Date().toLocaleTimeString();
                const line = document.createElement('div');
                line.textContent = `[${timestamp}] ${message}`;
                output.appendChild(line);
                output.scrollTop = output.scrollHeight;
                
                // Keep log history manageable
                if (output.children.length > 30) {
                    output.removeChild(output.firstChild);
                }
            }
        }
        
        // Global function for button commands
        function executeCommand(cmd) {
            window.xiInterface.executeCommand(cmd);
        }
        
        // Initialize the interface
        window.xiInterface = new ΞRealityInterface();
    </script>
</body>
</html>
