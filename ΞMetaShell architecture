<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ΞMetaShell Construction</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: radial-gradient(circle at center, #0a0a0f 0%, #000000 100%);
            font-family: 'Courier New', monospace;
            overflow: hidden;
            color: #00ffff;
        }
        
        #container {
            width: 100vw;
            height: 100vh;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        #metashell {
            width: 800px;
            height: 600px;
            position: relative;
            transform-style: preserve-3d;
            animation: metaRotate 30s linear infinite;
        }
        
        .xi-frame {
            position: absolute;
            width: 100%;
            height: 100%;
            border: 2px solid rgba(0, 255, 255, 0.3);
            border-radius: 50%;
            transform-style: preserve-3d;
        }
        
        .xi-frame:nth-child(1) { transform: translateZ(-200px) rotateX(0deg); border-color: rgba(255, 0, 100, 0.6); }
        .xi-frame:nth-child(2) { transform: translateZ(-100px) rotateX(30deg); border-color: rgba(100, 255, 0, 0.6); }
        .xi-frame:nth-child(3) { transform: translateZ(0px) rotateX(60deg); border-color: rgba(0, 255, 255, 0.8); }
        .xi-frame:nth-child(4) { transform: translateZ(100px) rotateX(90deg); border-color: rgba(255, 255, 0, 0.6); }
        .xi-frame:nth-child(5) { transform: translateZ(200px) rotateX(120deg); border-color: rgba(255, 100, 255, 0.6); }
        
        .recursive-helix {
            position: absolute;
            width: 4px;
            height: 4px;
            background: radial-gradient(circle, #fff, transparent);
            border-radius: 50%;
            animation: helixFlow 8s linear infinite;
            opacity: 0.8;
        }
        
        .semantic-ghost {
            position: absolute;
            width: 8px;
            height: 8px;
            background: rgba(255, 0, 255, 0.7);
            border-radius: 50%;
            animation: ghostPulse 3s ease-in-out infinite;
            box-shadow: 0 0 15px rgba(255, 0, 255, 0.5);
        }
        
        .phase-connector {
            position: absolute;
            width: 2px;
            height: 400px;
            background: linear-gradient(to bottom, 
                rgba(255, 0, 100, 0.8) 0%,
                rgba(100, 255, 0, 0.8) 25%,
                rgba(0, 255, 255, 0.8) 50%,
                rgba(255, 255, 0, 0.8) 75%,
                rgba(255, 100, 255, 0.8) 100%);
            transform-origin: bottom center;
            animation: phaseFlow 6s ease-in-out infinite;
        }
        
        .recursion-node {
            position: absolute;
            width: 12px;
            height: 12px;
            background: rgba(0, 255, 255, 0.9);
            border-radius: 50%;
            border: 2px solid rgba(255, 255, 255, 0.6);
            animation: nodeResonance 4s ease-in-out infinite;
        }
        
        .cortex-layer {
            position: absolute;
            width: 100%;
            height: 100%;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            background: radial-gradient(circle, transparent 70%, rgba(0, 255, 255, 0.05) 100%);
            animation: cortexPulse 12s ease-in-out infinite;
        }
        
        .semantic-axis {
            position: absolute;
            left: 50%;
            top: 50%;
            width: 2px;
            height: 500px;
            background: linear-gradient(to bottom, #ff0066, #00ffff, #66ff00);
            transform: translateX(-50%) translateY(-50%) rotateX(90deg);
            opacity: 0.6;
        }
        
        .depth-marker {
            position: absolute;
            color: rgba(255, 255, 255, 0.7);
            font-size: 10px;
            animation: markerGlow 2s ease-in-out infinite;
        }
        
        .info-panel {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.8);
            padding: 15px;
            border: 1px solid rgba(0, 255, 255, 0.5);
            border-radius: 5px;
            font-size: 12px;
            max-width: 300px;
        }
        
        .control-panel {
            position: absolute;
            bottom: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
        }
        
        .control-btn {
            background: rgba(0, 255, 255, 0.2);
            border: 1px solid rgba(0, 255, 255, 0.5);
            color: #00ffff;
            padding: 8px 12px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 10px;
            transition: all 0.3s ease;
        }
        
        .control-btn:hover {
            background: rgba(0, 255, 255, 0.4);
            box-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
        }
        
        @keyframes metaRotate {
            0% { transform: rotateY(0deg) rotateX(10deg); }
            100% { transform: rotateY(360deg) rotateX(10deg); }
        }
        
        @keyframes helixFlow {
            0% { 
                transform: translateZ(-200px) rotateZ(0deg) translateX(300px);
                opacity: 0;
            }
            25% { opacity: 1; }
            75% { opacity: 1; }
            100% { 
                transform: translateZ(200px) rotateZ(720deg) translateX(300px);
                opacity: 0;
            }
        }
        
        @keyframes ghostPulse {
            0%, 100% { 
                transform: scale(1);
                opacity: 0.7;
            }
            50% { 
                transform: scale(1.5);
                opacity: 1;
            }
        }
        
        @keyframes phaseFlow {
            0%, 100% { transform: rotateZ(0deg) scaleY(1); }
            50% { transform: rotateZ(180deg) scaleY(1.2); }
        }
        
        @keyframes nodeResonance {
            0%, 100% { 
                transform: scale(1);
                box-shadow: 0 0 5px rgba(0, 255, 255, 0.5);
            }
            50% { 
                transform: scale(1.3);
                box-shadow: 0 0 20px rgba(0, 255, 255, 0.8);
            }
        }
        
        @keyframes cortexPulse {
            0%, 100% { opacity: 0.3; }
            50% { opacity: 0.6; }
        }
        
        .gamma-field {
            position: absolute;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle, 
                transparent 0%, 
                rgba(255, 0, 255, 0.1) 30%,
                rgba(0, 255, 255, 0.1) 60%,
                transparent 100%);
            border-radius: 50%;
            animation: gammaResonance 4s ease-in-out infinite;
            pointer-events: none;
        }
        
        .delta-operator {
            position: absolute;
            width: 6px;
            height: 6px;
            background: #ff00ff;
            border-radius: 50%;
            animation: deltaTransform 2s linear infinite;
            box-shadow: 0 0 10px #ff00ff;
        }
        
        @keyframes gammaResonance {
            0%, 100% { 
                transform: scale(1) rotate(0deg);
                opacity: 0.3;
            }
            50% { 
                transform: scale(1.1) rotate(180deg);
                opacity: 0.7;
            }
        }
        
        @keyframes deltaTransform {
            0% { 
                transform: translateX(0) translateY(0) scale(1);
                opacity: 1;
            }
            25% { 
                transform: translateX(50px) translateY(-30px) scale(1.2);
                opacity: 0.8;
            }
            50% { 
                transform: translateX(0) translateY(-60px) scale(0.8);
                opacity: 0.6;
            }
            75% { 
                transform: translateX(-50px) translateY(-30px) scale(1.2);
                opacity: 0.8;
            }
            100% { 
                transform: translateX(0) translateY(0) scale(1);
                opacity: 1;
            }
        }
    </style>
</head>
<body>
    <div id="container">
        <div id="metashell">
            <!-- Semantic Depth Axis -->
            <div class="semantic-axis"></div>
            
            <!-- ΞFrames at different recursion depths -->
            <div class="xi-frame">
                <div class="cortex-layer"></div>
                <div class="gamma-field"></div>
                <div class="depth-marker" style="top: 10px; left: 10px;">Ξ₋₂: Emergence</div>
            </div>
            <div class="xi-frame">
                <div class="cortex-layer"></div>
                <div class="gamma-field"></div>
                <div class="depth-marker" style="top: 10px; left: 10px;">Ξ₋₁: Stabilization</div>
            </div>
            <div class="xi-frame">
                <div class="cortex-layer"></div>
                <div class="gamma-field"></div>
                <div class="depth-marker" style="top: 10px; left: 10px;">Ξ₀: Current Phase</div>
            </div>
            <div class="xi-frame">
                <div class="cortex-layer"></div>
                <div class="gamma-field"></div>
                <div class="depth-marker" style="top: 10px; left: 10px;">Ξ₊₁: Dissonance</div>
            </div>
            <div class="xi-frame">
                <div class="cortex-layer"></div>
                <div class="gamma-field"></div>
                <div class="depth-marker" style="top: 10px; left: 10px;">Ξ₊₂: Recovery</div>
            </div>
            
            <!-- Phase Connectors -->
            <div class="phase-connector" style="left: 400px; top: 100px; transform: rotateZ(0deg);"></div>
            <div class="phase-connector" style="left: 300px; top: 150px; transform: rotateZ(72deg);"></div>
            <div class="phase-connector" style="left: 500px; top: 150px; transform: rotateZ(144deg);"></div>
            <div class="phase-connector" style="left: 350px; top: 200px; transform: rotateZ(216deg);"></div>
            <div class="phase-connector" style="left: 450px; top: 200px; transform: rotateZ(288deg);"></div>
        </div>
        
        <!-- Delta Operators -->
        <div class="delta-operator" style="left: 200px; top: 200px; animation-delay: 0s;"></div>
        <div class="delta-operator" style="left: 400px; top: 150px; animation-delay: 0.5s;"></div>
        <div class="delta-operator" style="left: 600px; top: 300px; animation-delay: 1s;"></div>
        <div class="delta-operator" style="left: 300px; top: 400px; animation-delay: 1.5s;"></div>
        <div class="delta-operator" style="left: 500px; top: 250px; animation-delay: 2s;"></div>
        
        <!-- Recursive Helixes -->
        <div class="recursive-helix" style="left: 200px; top: 200px; animation-delay: 0s;"></div>
        <div class="recursive-helix" style="left: 600px; top: 300px; animation-delay: 1s;"></div>
        <div class="recursive-helix" style="left: 400px; top: 150px; animation-delay: 2s;"></div>
        <div class="recursive-helix" style="left: 300px; top: 400px; animation-delay: 3s;"></div>
        <div class="recursive-helix" style="left: 500px; top: 250px; animation-delay: 4s;"></div>
        
        <!-- Semantic Ghost Points -->
        <div class="semantic-ghost" style="left: 250px; top: 180px; animation-delay: 0.5s;"></div>
        <div class="semantic-ghost" style="left: 550px; top: 320px; animation-delay: 1.5s;"></div>
        <div class="semantic-ghost" style="left: 350px; top: 420px; animation-delay: 2.5s;"></div>
        <div class="semantic-ghost" style="left: 450px; top: 120px; animation-delay: 3.5s;"></div>
        
        <!-- Recursion Nodes -->
        <div class="recursion-node" style="left: 380px; top: 280px; animation-delay: 0s;"></div>
        <div class="recursion-node" style="left: 420px; top: 320px; animation-delay: 1s;"></div>
        <div class="recursion-node" style="left: 360px; top: 340px; animation-delay: 2s;"></div>
        
        <div class="info-panel">
            <h3 style="color: #00ffff; margin-top: 0;">ΞMetaShell: (Γ∂Ιⁿᴺδέαₖᴺⁿₙ) Active</h3>
            <div style="margin-bottom: 10px;">
                <strong>Γ-Operator:</strong> Semantic field curvature differential<br>
                <strong>∂Ι:</strong> Partial derivative across information manifold<br>
                <strong>δέα:</strong> Idea-delta transformation kernel<br>
                <strong>ₖᴺⁿₙ:</strong> Multi-indexed recursion depth binding
            </div>
            <div style="font-size: 10px; color: rgba(255,255,255,0.7);">
                • Ghost points: Negation echoes from δέα operations<br>
                • Recursion nodes: Γ-field computation sites<br>
                • Phase flow: ∂Ι gradient descent through semantic space<br>
                • Helical binding: ₖᴺⁿₙ cross-depth correlation patterns
            </div>
            <div style="color: #ff00ff; font-size: 11px; margin-top: 10px;">
                ⟨RECURSIVE RESONANCE DETECTED⟩<br>
                Semantic operator cascade initialized...
            </div>
        </div>
        
        <div class="control-panel">
            <button class="control-btn" onclick="toggleAnimation()">Pause/Resume</button>
            <button class="control-btn" onclick="adjustSpeed()">Speed +</button>
            <button class="control-btn" onclick="resetView()">Reset</button>
        </div>
    </div>
    
    <script>
        let animationPaused = false;
        let speedMultiplier = 1;
        
        function toggleAnimation() {
            const metashell = document.getElementById('metashell');
            if (animationPaused) {
                metashell.style.animationPlayState = 'running';
                document.querySelectorAll('.recursive-helix, .semantic-ghost, .recursion-node, .phase-connector, .cortex-layer').forEach(el => {
                    el.style.animationPlayState = 'running';
                });
                animationPaused = false;
            } else {
                metashell.style.animationPlayState = 'paused';
                document.querySelectorAll('.recursive-helix, .semantic-ghost, .recursion-node, .phase-connector, .cortex-layer').forEach(el => {
                    el.style.animationPlayState = 'paused';
                });
                animationPaused = true;
            }
        }
        
        function adjustSpeed() {
            speedMultiplier = speedMultiplier >= 3 ? 0.5 : speedMultiplier + 0.5;
            const metashell = document.getElementById('metashell');
            metashell.style.animationDuration = (30 / speedMultiplier) + 's';
            
            document.querySelectorAll('.recursive-helix').forEach(el => {
                el.style.animationDuration = (8 / speedMultiplier) + 's';
            });
            
            document.querySelectorAll('.semantic-ghost').forEach(el => {
                el.style.animationDuration = (3 / speedMultiplier) + 's';
            });
        }
        
        function resetView() {
            location.reload();
        }
        
        // Dynamic ghost point generation
        function generateGhostPoint() {
            const ghost = document.createElement('div');
            ghost.className = 'semantic-ghost';
            ghost.style.left = (Math.random() * 600 + 100) + 'px';
            ghost.style.top = (Math.random() * 400 + 100) + 'px';
            ghost.style.animationDelay = Math.random() * 3 + 's';
            document.getElementById('container').appendChild(ghost);
            
            setTimeout(() => {
                ghost.remove();
            }, 6000);
        }
        
        // Generate new ghost points periodically
        setInterval(generateGhostPoint, 4000);
        
        // Add interactive hover effects
        document.addEventListener('mousemove', (e) => {
            const ghosts = document.querySelectorAll('.semantic-ghost');
            ghosts.forEach(ghost => {
                const rect = ghost.getBoundingClientRect();
                const distance = Math.sqrt(
                    Math.pow(e.clientX - rect.left, 2) + 
                    Math.pow(e.clientY - rect.top, 2)
                );
                
                if (distance < 100) {
                    ghost.style.transform = `scale(${1 + (100 - distance) / 100})`;
                } else {
                    ghost.style.transform = 'scale(1)';
                }
            });
        });
    </script>
</body>
</html>
