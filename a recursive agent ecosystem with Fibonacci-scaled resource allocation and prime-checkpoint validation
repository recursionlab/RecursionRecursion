import asyncio
import random
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass, field
from enum import Enum
import numpy as np
from abc import ABC, abstractmethod

class AgentCapability(Enum):
    REASONING = "reasoning"
    CREATIVITY = "creativity"
    ANALYSIS = "analysis"
    MEMORY = "memory"
    COMPUTATION = "computation"
    SEARCH = "search"
    SYNTHESIS = "synthesis"

@dataclass
class AgentResources:
    """Defines the resource allocation for an agent"""
    reasoning_power: int = 1
    memory_capacity: int = 1
    computation_cycles: int = 1
    creativity_tokens: int = 1
    analysis_depth: int = 1
    search_breadth: int = 1
    synthesis_ability: int = 1
    
    def total_resources(self) -> int:
        return (self.reasoning_power + self.memory_capacity + 
                self.computation_cycles + self.creativity_tokens +
                self.analysis_depth + self.search_breadth + 
                self.synthesis_ability)
    
    def combine_with(self, other: 'AgentResources') -> 'AgentResources':
        """Combine resources with another agent (Fibonacci addition)"""
        return AgentResources(
            reasoning_power=self.reasoning_power + other.reasoning_power,
            memory_capacity=self.memory_capacity + other.memory_capacity,
            computation_cycles=self.computation_cycles + other.computation_cycles,
            creativity_tokens=self.creativity_tokens + other.creativity_tokens,
            analysis_depth=self.analysis_depth + other.analysis_depth,
            search_breadth=self.search_breadth + other.search_breadth,
            synthesis_ability=self.synthesis_ability + other.synthesis_ability
        )
    
    def __str__(self) -> str:
        return f"Resources(Total: {self.total_resources()}, R:{self.reasoning_power}, M:{self.memory_capacity}, C:{self.computation_cycles})"

@dataclass
class DebateResult:
    winner_id: str
    loser_id: str
    quality_score: float
    reasoning_depth: int
    innovation_factor: float
    argument_strength: float

class Agent:
    """Base agent class with resource-scaled capabilities"""
    
    def __init__(self, agent_id: str, resources: AgentResources, generation: int = 0):
        self.agent_id = agent_id
        self.resources = resources
        self.generation = generation
        self.conversation_history: List[str] = []
        self.victories = 0
        self.defeats = 0
    
    async def generate_argument(self, topic: str, context: List[str] = None) -> str:
        """Generate argument based on resource allocation"""
        # Simulate resource-scaled thinking
        thinking_depth = min(self.resources.reasoning_power, 10)
        creativity_boost = self.resources.creativity_tokens * 0.1
        
        # Base argument generation (mock implementation)
        base_args = [
            f"From my analysis with {self.resources.analysis_depth}x depth: {topic}",
            f"Considering {self.resources.memory_capacity} previous contexts",
            f"After {self.resources.computation_cycles} computational cycles",
            f"With creative synthesis level {self.resources.synthesis_ability}"
        ]
        
        # Simulate deeper thinking with more resources
        for i in range(thinking_depth):
            await asyncio.sleep(0.01)  # Simulate processing time
        
        argument = f"Agent-{self.agent_id} (Gen {self.generation}, Resources: {self.resources.total_resources()}): "
        argument += " | ".join(base_args[:min(len(base_args), self.resources.synthesis_ability)])
        
        self.conversation_history.append(argument)
        return argument
    
    def get_capability_score(self) -> float:
        """Calculate overall capability based on resources"""
        return (self.resources.total_resources() * 
                (1 + self.victories * 0.1 - self.defeats * 0.05))

class FibonacciAgentArchitecture:
    """Main architecture managing the recursive agent evolution"""
    
    def __init__(self, initial_resources: AgentResources, convergence_threshold: float = 0.9):
        self.agents: List[Agent] = []
        self.fibonacci_sequence = [1, 1]
        self.current_step = 0
        self.convergence_threshold = convergence_threshold
        self.debate_history: List[DebateResult] = []
        self.initial_resources = initial_resources
        
        # Initialize first two agents
        self._initialize_base_agents()
    
    def _initialize_base_agents(self):
        """Create the first two agents with base resources"""
        agent_0 = Agent("F0", self.initial_resources, generation=0)
        agent_1 = Agent("F1", self.initial_resources, generation=1)
        
        self.agents = [agent_0, agent_1]
    
    def _generate_fibonacci_number(self, n: int) -> int:
        """Generate nth Fibonacci number"""
        while len(self.fibonacci_sequence) <= n:
            next_fib = self.fibonacci_sequence[-1] + self.fibonacci_sequence[-2]
            self.fibonacci_sequence.append(next_fib)
        return self.fibonacci_sequence[n]
    
    def _is_fibonacci_prime(self, fib_num: int) -> bool:
        """Check if a Fibonacci number is prime"""
        if fib_num < 2:
            return False
        if fib_num == 2:
            return True
        if fib_num % 2 == 0:
            return False
        
        for i in range(3, int(fib_num**0.5) + 1, 2):
            if fib_num % i == 0:
                return False
        return True
    
    def _create_next_agent(self) -> Agent:
        """Create next agent with Fibonacci-scaled resources"""
        if len(self.agents) < 2:
            raise ValueError("Need at least 2 agents to create next one")
        
        # Get highest and lowest resource agents from last conversation
        sorted_agents = sorted(self.agents[-2:], key=lambda a: a.resources.total_resources())
        lowest = sorted_agents[0]
        highest = sorted_agents[1]
        
        # Combine resources following Fibonacci pattern
        new_resources = highest.resources.combine_with(lowest.resources)
        
        new_agent_id = f"F{len(self.agents)}"
        new_agent = Agent(new_agent_id, new_resources, generation=len(self.agents))
        
        return new_agent
    
    async def _conduct_debate(self, agent1: Agent, agent2: Agent, topic: str) -> DebateResult:
        """Conduct debate between two agents"""
        print(f"\n🥊 DEBATE: {agent1.agent_id} vs {agent2.agent_id}")
        print(f"Topic: {topic}")
        
        # Generate arguments
        arg1 = await agent1.generate_argument(topic)
        arg2 = await agent2.generate_argument(topic, [arg1])
        
        print(f"\n{agent1.agent_id}: {arg1}")
        print(f"\n{agent2.agent_id}: {arg2}")
        
        # Evaluate debate (simplified scoring)
        score1 = (agent1.resources.total_resources() * random.uniform(0.8, 1.2) + 
                 len(arg1.split()) * 0.1)
        score2 = (agent2.resources.total_resources() * random.uniform(0.8, 1.2) + 
                 len(arg2.split()) * 0.1)
        
        winner = agent1 if score1 > score2 else agent2
        loser = agent2 if winner == agent1 else agent1
        
        winner.victories += 1
        loser.defeats += 1
        
        result = DebateResult(
            winner_id=winner.agent_id,
            loser_id=loser.agent_id,
            quality_score=max(score1, score2),
            reasoning_depth=winner.resources.reasoning_power,
            innovation_factor=winner.resources.creativity_tokens * 0.1,
            argument_strength=winner.resources.total_resources()
        )
        
        self.debate_history.append(result)
        print(f"🏆 Winner: {winner.agent_id} (Score: {max(score1, score2):.2f})")
        
        return result
    
    def _check_convergence_requirements(self) -> Tuple[bool, float]:
        """Check if system has converged at Fibonacci prime checkpoint"""
        if len(self.debate_history) < 3:
            return False, 0.0
        
        # Analyze recent debate quality trends
        recent_debates = self.debate_history[-3:]
        quality_scores = [d.quality_score for d in recent_debates]
        quality_trend = np.mean(quality_scores)
        
        # Check for resource efficiency (diminishing returns)
        if len(self.agents) >= 2:
            resource_efficiency = (quality_trend / 
                                 self.agents[-1].resources.total_resources())
        else:
            resource_efficiency = 0.0
        
        converged = resource_efficiency >= self.convergence_threshold
        
        print(f"\n📊 CONVERGENCE CHECK:")
        print(f"Quality Trend: {quality_trend:.2f}")
        print(f"Resource Efficiency: {resource_efficiency:.4f}")
        print(f"Threshold: {self.convergence_threshold}")
        print(f"Converged: {converged}")
        
        return converged, resource_efficiency
    
    def _reorder_agents_at_prime(self):
        """Reorder agents at Fibonacci prime steps"""
        print(f"\n🔄 PRIME REORDERING at step {self.current_step}")
        
        # Sort agents by capability score
        self.agents.sort(key=lambda a: a.get_capability_score(), reverse=True)
        
        print("New agent order:")
        for i, agent in enumerate(self.agents):
            print(f"  {i+1}. {agent.agent_id} - Capability: {agent.get_capability_score():.2f}")
    
    async def run_recursive_evolution(self, topic: str, max_steps: int = 20) -> Dict[str, Any]:
        """Main evolutionary loop"""
        print(f"🚀 Starting Fibonacci Agent Architecture Evolution")
        print(f"Topic: {topic}")
        print(f"Initial agents: {len(self.agents)}")
        
        converged = False
        evolution_log = []
        
        while self.current_step < max_steps and not converged:
            self.current_step += 1
            current_fib = self._generate_fibonacci_number(self.current_step)
            
            print(f"\n{'='*60}")
            print(f"STEP {self.current_step} - Fibonacci: {current_fib}")
            print(f"{'='*60}")
            
            # Create new agent if we have less than the current Fibonacci number
            if len(self.agents) < self.current_step + 1:
                new_agent = self._create_next_agent()
                self.agents.append(new_agent)
                print(f"✨ Created new agent: {new_agent.agent_id} with {new_agent.resources.total_resources()} total resources")
            
            # Conduct debate: new agent vs previous highest
            if len(self.agents) >= 2:
                new_agent = self.agents[-1]
                previous_highest = max(self.agents[:-1], 
                                     key=lambda a: a.resources.total_resources())
                
                debate_result = await self._conduct_debate(new_agent, previous_highest, topic)
                
                step_log = {
                    'step': self.current_step,
                    'fibonacci_number': current_fib,
                    'agents_count': len(self.agents),
                    'debate_winner': debate_result.winner_id,
                    'quality_score': debate_result.quality_score
                }
                evolution_log.append(step_log)
            
            # Check for Fibonacci prime and reorder if needed
            if self._is_fibonacci_prime(current_fib):
                print(f"\n🌟 FIBONACCI PRIME DETECTED: {current_fib}")
                self._reorder_agents_at_prime()
                
                # Check convergence requirements
                converged, efficiency = self._check_convergence_requirements()
                
                if converged:
                    print(f"\n🎯 CONVERGENCE ACHIEVED!")
                    break
        
        # Final results
        final_results = {
            'converged': converged,
            'total_steps': self.current_step,
            'final_agent_count': len(self.agents),
            'evolution_log': evolution_log,
            'final_agents': [(a.agent_id, a.resources.total_resources(), a.get_capability_score()) 
                           for a in self.agents],
            'debate_history': self.debate_history
        }
        
        self._print_final_summary(final_results)
        return final_results
    
    def _print_final_summary(self, results: Dict[str, Any]):
        """Print evolution summary"""
        print(f"\n{'='*60}")
        print("EVOLUTION COMPLETE")
        print(f"{'='*60}")
        print(f"Converged: {results['converged']}")
        print(f"Total Steps: {results['total_steps']}")
        print(f"Final Agents: {results['final_agent_count']}")
        
        print(f"\nFinal Agent Rankings:")
        for i, (agent_id, resources, capability) in enumerate(results['final_agents']):
            print(f"  {i+1}. {agent_id}: {resources} resources, {capability:.2f} capability")
        
        if results['debate_history']:
            avg_quality = np.mean([d.quality_score for d in results['debate_history']])
            print(f"\nAverage Debate Quality: {avg_quality:.2f}")

# Example usage
async def main():
    # Define initial resource allocation
    initial_resources = AgentResources(
        reasoning_power=2,
        memory_capacity=2,
        computation_cycles=1,
        creativity_tokens=1,
        analysis_depth=1,
        search_breadth=1,
        synthesis_ability=1
    )
    
    # Create architecture
    architecture = FibonacciAgentArchitecture(initial_resources, convergence_threshold=0.8)
    
    # Run evolution
    topic = "How can AI systems achieve recursive self-improvement while maintaining alignment?"
    results = await architecture.run_recursive_evolution(topic, max_steps=15)
    
    return results

# Run the example
if __name__ == "__main__":
    results = asyncio.run(main())
