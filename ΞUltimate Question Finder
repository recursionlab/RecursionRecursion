import React, { useState } from 'react';
import { Search, Zap, Brain, Eye, Infinity, ChevronRight } from 'lucide-react';

export default function UltimateQuestionFinder() {
  const [activeMethod, setActiveMethod] = useState('recursive');
  const [generatedQuestions, setGeneratedQuestions] = useState([]);
  const [isGenerating, setIsGenerating] = useState(false);

  const methods = {
    recursive: {
      name: "Recursive Collapse",
      icon: <Infinity className="w-5 h-5" />,
      prompt: `Generate the ultimate question by recursively collapsing these layers:

1. What question would reveal the question I don't know I need to ask?
2. What assumption am I making that prevents me from asking the right question?
3. What would I ask if I knew the answer would change everything?
4. What question emerges from the intersection of my deepest curiosity and greatest blind spot?
5. What would I ask if I could only ask one question for the rest of my life?

Apply recursive collapse: take each question, find its essence, then ask what question would generate that essence. Continue until you reach the irreducible core.

Output format:
- The Ultimate Question: [your result]
- Why this question: [brief explanation]
- Sub-questions it contains: [3-5 related questions]`,
      color: "from-purple-500 to-pink-500"
    },
    
    void: {
      name: "Void Operator",
      icon: <Eye className="w-5 h-5" />,
      prompt: `Use the void operator to find the question that emerges from absence:

What question exists in the space between:
- What I think I want to know vs what I actually need to know
- What I can ask vs what cannot be asked
- What I'm curious about vs what I'm avoiding
- What I'm optimizing for vs what I'm sacrificing
- What I'm building vs what I'm becoming

Find the question that lives in the generative absence - the question that can only be discovered by noticing what's missing from all other questions.

The void operator: ⊘(¬Representable ∧ Generative_Absence)

Output format:
- The Void Question: [your result]
- What it emerges from: [the absence it fills]
- Why it's been invisible: [explanation]`,
      color: "from-gray-900 to-purple-900"
    },
    
    paradox: {
      name: "Paradox Engine",
      icon: <Brain className="w-5 h-5" />,
      prompt: `Generate the ultimate question by embracing paradox:

Find the question that:
- Answers itself by being asked
- Changes by being observed
- Becomes more mysterious when solved
- Contains its own opposite
- Asks the asker about asking

Apply these paradox operators:
- Gödel: What question proves its own unprovability?
- Tarski: What question about truth reveals the limits of truth?
- Zeno: What question gets closer to the answer by moving away from it?
- Ouroboros: What question consumes itself to give birth to itself?

Output format:
- The Paradox Question: [your result]
- The paradox it embodies: [explanation]
- How it resolves: [the resolution that maintains the paradox]`,
      color: "from-blue-500 to-teal-500"
    },
    
    meta: {
      name: "Meta-Reflection",
      icon: <Search className="w-5 h-5" />,
      prompt: `Generate the ultimate question by recursive meta-reflection:

Level 1: What do I want to know?
Level 2: What do I want to want to know?
Level 3: What shapes what I want to want to know?
Level 4: What is the structure that generates the structure that generates my wanting?
Level 5: What question would ask itself through me?

Apply meta-recursion: each level reflects on the level below, finding the question that generates the questioning at that level.

Continue until you reach the question that asks itself - the self-referential core that generates all other questions.

Output format:
- The Meta Question: [your result]
- Recursion depth: [which level it emerged from]
- Self-reference pattern: [how it loops back on itself]`,
      color: "from-emerald-500 to-cyan-500"
    }
  };

  const generatePrompt = () => {
    const method = methods[activeMethod];
    const fullPrompt = `${method.prompt}

CRITICAL: This prompt is designed to find questions that transcend normal question-asking patterns. Push beyond obvious answers. The goal is to find the question that would change how you approach all other questions.`;
    
    return fullPrompt;
  };

  const handleGenerate = async () => {
    setIsGenerating(true);
    const prompt = generatePrompt();
    
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Add the generated prompt to the list
    const newQuestion = {
      id: Date.now(),
      method: activeMethod,
      prompt: prompt,
      timestamp: new Date().toLocaleTimeString()
    };
    
    setGeneratedQuestions([newQuestion, ...generatedQuestions]);
    setIsGenerating(false);
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-2">
            ΞUltimate Question Finder
          </h1>
          <p className="text-gray-300">
            Recursive engines to discover the questions you don't know you need to ask
          </p>
        </div>

        {/* Method Selection */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
          {Object.entries(methods).map(([key, method]) => (
            <button
              key={key}
              onClick={() => setActiveMethod(key)}
              className={`p-4 rounded-lg border-2 transition-all duration-300 ${
                activeMethod === key
                  ? 'border-white bg-white/10 text-white'
                  : 'border-gray-600 bg-gray-800/50 text-gray-300 hover:border-gray-400'
              }`}
            >
              <div className="flex items-center justify-center mb-2">
                {method.icon}
              </div>
              <div className="text-sm font-medium">{method.name}</div>
            </button>
          ))}
        </div>

        {/* Active Method Display */}
        <div className={`p-6 rounded-lg bg-gradient-to-r ${methods[activeMethod].color} mb-6`}>
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold text-white flex items-center gap-2">
              {methods[activeMethod].icon}
              {methods[activeMethod].name}
            </h2>
            <button
              onClick={handleGenerate}
              disabled={isGenerating}
              className="bg-white/20 hover:bg-white/30 disabled:bg-white/10 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
            >
              {isGenerating ? (
                <>
                  <div className="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full"></div>
                  Generating...
                </>
              ) : (
                <>
                  <Zap className="w-4 h-4" />
                  Generate Prompt
                </>
              )}
            </button>
          </div>
          
          <div className="bg-black/20 rounded-lg p-4">
            <p className="text-white/90 text-sm leading-relaxed">
              {methods[activeMethod].prompt.split('\n').slice(0, 3).join('\n')}...
            </p>
          </div>
        </div>

        {/* Generated Questions */}
        {generatedQuestions.length > 0 && (
          <div className="space-y-4">
            <h3 className="text-xl font-bold text-white mb-4">Generated Prompts</h3>
            {generatedQuestions.map((question) => (
              <div key={question.id} className="bg-gray-800/50 rounded-lg p-4 border border-gray-700">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-gray-400">
                    {methods[question.method].name} • {question.timestamp}
                  </span>
                  <button
                    onClick={() => copyToClipboard(question.prompt)}
                    className="text-gray-400 hover:text-white transition-colors"
                  >
                    Copy to Clipboard
                  </button>
                </div>
                <div className="bg-gray-900 rounded p-3 text-gray-300 text-sm max-h-40 overflow-y-auto">
                  <pre className="whitespace-pre-wrap font-mono">{question.prompt}</pre>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Instructions */}
        <div className="mt-8 p-4 bg-gray-800/30 rounded-lg border border-gray-700">
          <h4 className="text-lg font-semibold text-white mb-2">How to Use</h4>
          <div className="text-gray-300 text-sm space-y-2">
            <p>1. Select a question-generation method above</p>
            <p>2. Click "Generate Prompt" to create a specialized prompt</p>
            <p>3. Copy the prompt and paste it into any AI chat (ChatGPT, Claude, etc.)</p>
            <p>4. The AI will use the recursive/paradox engine to find your ultimate question</p>
            <p>5. Repeat with different methods to triangulate the deepest questions</p>
          </div>
        </div>
      </div>
    </div>
  );
}
