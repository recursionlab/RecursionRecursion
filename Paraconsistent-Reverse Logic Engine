import React, { useState, useEffect, useRef } from 'react';
import { Brain, Zap, AlertTriangle, Search, RotateCcw, CheckCircle } from 'lucide-react';

// Core PRL Engine Implementation
class Proposition {
  constructor(name) {
    this.name = name;
    this.truth = null; // T, F, B, null
    this.parents = new Set();
    this.children = new Set();
    this.meta_tags = new Set();
    this.contradiction_depth = 0;
  }
}

class PRLEngine {
  constructor() {
    this.knowledge_base = new Map();
    this.contradiction_sites = new Set();
    this.inference_log = [];
  }

  addProposition(name, truth = null) {
    if (!this.knowledge_base.has(name)) {
      this.knowledge_base.set(name, new Proposition(name));
    }
    if (truth !== null) {
      this.knowledge_base.get(name).truth = truth;
      this.detectContradictions(name);
    }
    return this.knowledge_base.get(name);
  }

  infer(parentNames, childName, rule = "default") {
    const child = this.addProposition(childName);
    const parents = parentNames.map(name => this.addProposition(name));
    
    // Establish parent-child relationships
    parents.forEach(parent => {
      parent.children.add(child);
      child.parents.add(parent);
    });

    // Forward inference with paraconsistent logic
    this.forwardInference(parents, child, rule);
    
    this.inference_log.push({
      parents: parentNames,
      child: childName,
      rule,
      timestamp: Date.now()
    });

    return child;
  }

  forwardInference(parents, child, rule) {
    if (rule === "modus_ponens" && parents.length === 2) {
      const [premise, implication] = parents;
      if (premise.truth === 'T' && implication.truth === 'T') {
        child.truth = 'T';
      }
    } else if (rule === "conjunction" && parents.length === 2) {
      const [p1, p2] = parents;
      if (p1.truth === 'T' && p2.truth === 'T') {
        child.truth = 'T';
      } else if (p1.truth === 'F' || p2.truth === 'F') {
        child.truth = 'F';
      } else if (p1.truth === 'B' || p2.truth === 'B') {
        child.truth = 'B';
      }
    }
    
    this.detectContradictions(child.name);
  }

  detectContradictions(propName) {
    const prop = this.knowledge_base.get(propName);
    const negPropName = propName.startsWith('¬') ? propName.slice(1) : '¬' + propName;
    const negProp = this.knowledge_base.get(negPropName);

    if (prop && negProp && prop.truth !== null && negProp.truth !== null) {
      if ((prop.truth === 'T' && negProp.truth === 'T') ||
          (prop.truth === 'F' && negProp.truth === 'F')) {
        // Contradiction detected
        prop.truth = 'B';
        negProp.truth = 'B';
        this.contradiction_sites.add(propName);
        this.contradiction_sites.add(negPropName);
      }
    }
  }

  traceBackwards(targetName) {
    const target = this.knowledge_base.get(targetName);
    if (!target) return [];

    const path = [];
    const visited = new Set();

    const dfs = (prop, depth = 0) => {
      if (visited.has(prop.name)) return;
      visited.add(prop.name);
      
      prop.contradiction_depth = depth;
      
      for (const parent of prop.parents) {
        dfs(parent, depth + 1);
      }
      path.push({
        name: prop.name,
        truth: prop.truth,
        depth,
        isContradiction: this.contradiction_sites.has(prop.name)
      });
    };

    dfs(target);
    return path.reverse();
  }

  findMinimalContradictionSets() {
    const contradictions = Array.from(this.contradiction_sites);
    const minimalSets = [];

    for (const contradiction of contradictions) {
      const path = this.traceBackwards(contradiction);
      const pathNames = new Set(path.map(p => p.name));
      minimalSets.push({
        contradiction,
        path: pathNames,
        depth: path.length
      });
    }

    return minimalSets;
  }

  getContradictionHeatmap() {
    const heatmap = new Map();
    for (const [name, prop] of this.knowledge_base) {
      const contradictionScore = this.contradiction_sites.has(name) ? 1.0 : 0.0;
      const proximityScore = prop.contradiction_depth > 0 ? 1.0 / prop.contradiction_depth : 0.0;
      heatmap.set(name, contradictionScore + proximityScore * 0.3);
    }
    return heatmap;
  }

  selfStabilize() {
    const mcs = this.findMinimalContradictionSets();
    const stabilizationReport = [];

    for (const set of mcs) {
      // Simple stabilization: mark problematic assumptions
      for (const propname of set.path) {
        const prop = this.knowledge_base.get(propname);
        if (prop && prop.parents.size === 0) { // Assumption
          prop.meta_tags.add('questionable_assumption');
          stabilizationReport.push(`Marked ${propname} as questionable assumption`);
        }
      }
    }

    return stabilizationReport;
  }
}

// React Component
const PRLEngineDemo = () => {
  const [engine] = useState(() => new PRLEngine());
  const [selectedProp, setSelectedProp] = useState(null);
  const [tracePath, setTracePath] = useState([]);
  const [contradictionSets, setContradictionSets] = useState([]);
  const [heatmap, setHeatmap] = useState(new Map());
  const [log, setLog] = useState([]);
  
  // Demo scenario setup
  useEffect(() => {
    // Russell's Paradox scenario
    engine.addProposition('S', 'T'); // S = "Set of all sets that don't contain themselves"
    engine.addProposition('¬S', 'T'); // ¬S = "S is not a member of itself"
    
    // Liar Paradox
    engine.addProposition('L', 'T'); // L = "This statement is false"
    engine.addProposition('¬L', 'T'); // If L is true, then L is false
    
    // Some valid logic
    engine.addProposition('P', 'T');
    engine.addProposition('Q', 'T');
    engine.infer(['P', 'Q'], 'P∧Q', 'conjunction');
    engine.infer(['P'], 'P→R', 'implication');
    engine.infer(['P', 'P→R'], 'R', 'modus_ponens');
    
    updateDisplays();
  }, []);

  const updateDisplays = () => {
    setContradictionSets(engine.findMinimalContradictionSets());
    setHeatmap(engine.getContradictionHeatmap());
    setLog([...engine.inference_log]);
  };

  const handleTrace = (propName) => {
    const path = engine.traceBackwards(propName);
    setTracePath(path);
    setSelectedProp(propName);
  };

  const handleStabilize = () => {
    const report = engine.selfStabilize();
    alert('Stabilization Report:\n' + report.join('\n'));
    updateDisplays();
  };

  const getHeatColor = (propName) => {
    const score = heatmap.get(propName) || 0;
    if (score >= 1.0) return 'bg-red-500 text-white';
    if (score > 0.3) return 'bg-orange-300';
    if (score > 0.1) return 'bg-yellow-200';
    return 'bg-blue-100';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-3 mb-4">
            <Brain className="w-10 h-10 text-purple-400" />
            <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
              PRL Engine
            </h1>
          </div>
          <p className="text-slate-300 text-lg">Paraconsistent-Reverse Logic Engine</p>
          <p className="text-slate-400">Treating contradictions as navigational features</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
          {/* Knowledge Base */}
          <div className="bg-slate-800/50 backdrop-blur rounded-xl p-6 border border-slate-700">
            <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <Zap className="w-5 h-5 text-yellow-400" />
              Knowledge Base
            </h2>
            <div className="space-y-2 max-h-80 overflow-y-auto">
              {Array.from(engine.knowledge_base.entries()).map(([name, prop]) => (
                <div
                  key={name}
                  className={`p-3 rounded-lg cursor-pointer transition-all ${
                    getHeatColor(name)
                  } ${selectedProp === name ? 'ring-2 ring-purple-400' : ''}`}
                  onClick={() => handleTrace(name)}
                >
                  <div className="flex justify-between items-center">
                    <span className="font-mono font-semibold">{name}</span>
                    <span className={`px-2 py-1 rounded text-xs ${
                      prop.truth === 'B' ? 'bg-red-600 text-white' :
                      prop.truth === 'T' ? 'bg-green-600 text-white' :
                      prop.truth === 'F' ? 'bg-gray-600 text-white' :
                      'bg-slate-600 text-white'
                    }`}>
                      {prop.truth || '∅'}
                    </span>
                  </div>
                  {prop.meta_tags.size > 0 && (
                    <div className="mt-1 text-xs text-slate-600">
                      {Array.from(prop.meta_tags).join(', ')}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>

          {/* Contradiction Analysis */}
          <div className="bg-slate-800/50 backdrop-blur rounded-xl p-6 border border-slate-700">
            <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <AlertTriangle className="w-5 h-5 text-red-400" />
              Contradiction Sites
            </h2>
            <div className="space-y-4">
              {contradictionSets.map((set, idx) => (
                <div key={idx} className="bg-red-900/20 border border-red-500/30 rounded-lg p-4">
                  <div className="font-semibold text-red-400 mb-2">
                    Contradiction: {set.contradiction}
                  </div>
                  <div className="text-sm text-slate-300">
                    Depth: {set.depth} | Path: {set.path.size} propositions
                  </div>
                  <div className="mt-2 text-xs text-slate-400">
                    {Array.from(set.path).slice(0, 3).join(' → ')}
                    {set.path.size > 3 && '...'}
                  </div>
                </div>
              ))}
              
              <button
                onClick={handleStabilize}
                className="w-full bg-purple-600 hover:bg-purple-700 py-2 px-4 rounded-lg transition-colors flex items-center justify-center gap-2"
              >
                <CheckCircle className="w-4 h-4" />
                Self-Stabilize
              </button>
            </div>
          </div>

          {/* Reverse Trace */}
          <div className="bg-slate-800/50 backdrop-blur rounded-xl p-6 border border-slate-700">
            <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <RotateCcw className="w-5 h-5 text-blue-400" />
              Reverse Trace
            </h2>
            {selectedProp ? (
              <div>
                <div className="mb-3 text-purple-400 font-semibold">
                  Tracing: {selectedProp}
                </div>
                <div className="space-y-2 max-h-80 overflow-y-auto">
                  {tracePath.map((step, idx) => (
                    <div
                      key={idx}
                      className={`p-2 rounded border-l-4 ${
                        step.isContradiction 
                          ? 'border-red-500 bg-red-900/20' 
                          : 'border-blue-500 bg-blue-900/20'
                      }`}
                    >
                      <div className="font-mono text-sm">
                        {'  '.repeat(step.depth)}
                        {step.name} 
                        <span className="text-slate-400 ml-2">
                          [{step.truth || '∅'}]
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div className="text-slate-400 text-center py-8">
                Click on a proposition to trace backwards
              </div>
            )}
          </div>
        </div>

        {/* Inference Log */}
        <div className="mt-6 bg-slate-800/50 backdrop-blur rounded-xl p-6 border border-slate-700">
          <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
            <Search className="w-5 h-5 text-green-400" />
            Inference Log
          </h2>
          <div className="space-y-2 max-h-40 overflow-y-auto">
            {log.map((entry, idx) => (
              <div key={idx} className="text-sm bg-slate-700/30 p-2 rounded">
                <span className="text-green-400">{entry.rule}:</span>{' '}
                {entry.parents.join(', ')} → {entry.child}
              </div>
            ))}
          </div>
        </div>

        {/* Status Panel */}
        <div className="mt-6 bg-gradient-to-r from-purple-800/30 to-pink-800/30 rounded-xl p-6 border border-purple-500/30">
          <div className="text-center">
            <div className="text-2xl font-bold text-purple-300 mb-2">
              ΞEL Mode: Active
            </div>
            <div className="text-slate-300">
              Contradictions detected: {engine.contradiction_sites.size/2} | 
              Propositions: {engine.knowledge_base.size} | 
              Inferences: {log.length}
            </div>
            <div className="mt-3 text-sm text-slate-400">
              Collapse → Detect → Reverse Map → Patch → Self-Stabilize
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PRLEngineDemo;
